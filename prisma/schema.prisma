// datasource db {
//   provider = "mongodb"
//   url      = env("DATABASE_URL")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// enum transporType {
//   VOITURE
//   CAMIONETTE
//   MOTO
//   TRYCICLE
//   AVION
//   BATEAU  
// }

// enum Role {
//   ADMIN
//   USER
//   COLLABORATOR
// }

// enum PayementMethode {
//   FLOOZ
//   CB
//   ORANGE_MONEY
//   CASH
// }

// enum TransactionStatut {
//   DONE
//   IN_PROGRESS
//   CANCELED
// }

// enum OderStatus {
//   ACCEPTED
//   CANCELED
//   PENDING
// }

// model Roles {
//   id    String  @id @default(auto()) @map("_id") @db.ObjectId
//   role  Role    @unique
//   users Users[]
// }

// model Users {
//   id                   String             @id @default(auto()) @map("_id") @db.ObjectId
//   name                 String
//   surname              String
//   email                String?            @unique
//   phone_number         String?            @unique
//   role                 Roles              @relation(fields: [roleId], references: [id])
//   roleId               String             @db.ObjectId
//   password             String
//   isEmailVerified      Boolean            @default(false)
//   isPhoneVerified      Boolean            @default(false)
//   otp                  UserOtp[]
//   recAddress           RecAddress[]
//   shippingProposal     ShippingProposal[]
//   shippingOrder        ShippingOrder[]
// }

// model Otp {
//   id      String    @id @default(auto()) @map("_id") @db.ObjectId
//   code    String
//   UserOtp UserOtp[]
// }

// model UserOtp {
//   id        String   @id @default(auto()) @map("_id") @db.ObjectId
//   otp       Otp      @relation(fields: [otpId], references: [id])
//   otpId     String   @db.ObjectId
//   user      Users    @relation(fields: [userId], references: [id])
//   userId    String   @db.ObjectId
//   createdAt DateTime @default(now())
// }

// model transportationType {
//   id              String       @id @default(auto()) @map("_id") @db.ObjectId
//   name            transporType
//   shippingOrder        ShippingOrder[]
// }

// model Transactions {
//   id                String   @id @default(auto()) @map("_id") @db.ObjectId
//   amount            String
//   payementMethode   PayementMethode
//   status            TransactionStatut
//   createdAt DateTime @default(now())
// }

// model ShippingProposal {
//   id                    String          @id @default(auto()) @map("_id") @db.ObjectId
//   departure_location    Json
//   arrival_location      Json
//   title                 String
//   description           String
//   ReceiverData          Json
//   SenderData            Json
//   user                  Users    @relation(fields: [userId], references: [id])
//   userId                String   @db.ObjectId
//   shippingOrder        ShippingOrder[]
// }

// model ShippingOrder {
//   id                    String          @id @default(auto()) @map("_id") @db.ObjectId
//   amount                String
//   status                OderStatus
//   user                  Users    @relation(fields: [deliveryDriverId], references: [id])
//   deliveryDriverId      String   @db.ObjectId
//   shippingProposal      ShippingProposal    @relation(fields: [shippingProposalId], references: [id])
//   shippingProposalId    String   @db.ObjectId  
//   transportationType    transportationType    @relation(fields: [transportationTypeId], references: [id])
//   transportationTypeId  String   @db.ObjectId
// }

// model RecAddress {
//   id             String          @id @default(auto()) @map("_id") @db.ObjectId
//   AddressHistory String[]
//   user           Users    @relation(fields: [userId], references: [id])
//   userId         String   @db.ObjectId
// }


datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum TransporType {
  VOITURE
  CAMIONETTE
  MOTO
  TRYCICLE
  AVION
  BATEAU  
}

enum Roles {
  ADMIN
  USER
  COLLABORATOR
}

enum PayementMethod {
  FLOOZ
  CB
  ORANGE_MONEY
  CASH
}

enum TransactionStatus {
  DONE
  IN_PROGRESS
  CANCELED
}

enum OrderStatus {
  ACCEPTED
  CANCELED
  PENDING
}

model Role {
  id    Int      @id @default(autoincrement())
  role  Roles
  users User[]
}

model User {
  id             Int          @id @default(autoincrement())
  name           String
  surname        String
  email          String?      @unique
  phone_number   String?      @unique
  role           Role         @relation(fields: [roleId], references: [id])
  roleId         Int
  password       String
  isEmailVerified      Boolean            @default(false)
  isPhoneVerified      Boolean            @default(false)
  otp            UserOtp[]
  recAddress     RecAddress[]
  shippingProposal ShippingProposal[]
  shippingOrder  ShippingOrder[]
}

model Otp {
  id      Int      @id @default(autoincrement())
  code    String
  userOtp UserOtp[]
}

model UserOtp {
  id        Int       @id @default(autoincrement())
  otp       Otp       @relation(fields: [otpId], references: [id])
  otpId     Int
  user      User      @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime  @default(now())
}

model TransportationType {
  id              Int             @id @default(autoincrement())
  name            TransporType
  shippingOrder   ShippingOrder[]
}

model Transaction {
  id                Int             @id @default(autoincrement())
  amount            String
  paymentMethod     PayementMethod
  status            TransactionStatus
  createdAt         DateTime        @default(now())
}

model ShippingProposal {
  id                    Int          @id @default(autoincrement())
  departureLocation     String
  arrivalLocation       String
  title                 String
  description           String
  receiverData          String
  senderData            String
  deliveryExpress       Boolean?
  duration              String?
  user                  User         @relation(fields: [userId], references: [id])
  userId                Int
  shippingOrder         ShippingOrder[]
}

model ShippingOrder {
  id                    Int          @id @default(autoincrement())
  amount                String
  status                OrderStatus
  user                  User         @relation(fields: [deliveryDriverId], references: [id])
  deliveryDriverId      Int
  shippingProposal      ShippingProposal    @relation(fields: [shippingProposalId], references: [id])
  shippingProposalId    Int  
  transportationType    TransportationType    @relation(fields: [transportationTypeId], references: [id])
  transportationTypeId  Int
}

model RecAddress {
  id             Int         @id @default(autoincrement())
  addressHistory String
  user           User        @relation(fields: [userId], references: [id])
  userId         Int
}
